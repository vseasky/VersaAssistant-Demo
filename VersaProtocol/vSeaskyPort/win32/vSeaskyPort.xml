<?xml version="1.0"?>
<doc>
    <assembly>
        "vSeaskyPort"
    </assembly>
    <members>
        <member name="M:vSeaskyProtocol.vSeaskyPort.GetStorageMethodIsSmall">
            <summary>
共用体数据的大小端测试
</summary>
            <param name="uLen" />
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.#ctor">
            <summary>
设置缓冲区域
</summary>
        </member>
        <member name="M:vSerialPort.getSerialLastError">
            <summary>
得到最后一次失败的错误信息
</summary>
            <returns>错误信息</returns>
        </member>
        <member name="M:vSerialPort.getSerialTransmitLen">
            <summary>
输出缓冲区字节数
</summary>
            <returns />
        </member>
        <member name="M:vSerialPort.getSerialReceiveLen">
            <summary>
输入缓冲区中的字节数
</summary>
            <returns />
        </member>
        <member name="M:vSerialPort.setBufferSize(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
设置推荐的缓冲大小
</summary>
            <param name="inputBuff">输入缓冲大小</param>
            <param name="outBuffer">输出缓冲大小</param>
            <returns>正确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:vSerialPort.flushBuff">
            <summary>
刷新缓冲区
</summary>
            <returns>正确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:vSerialPort.purgeBuff(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
刷新缓冲区
</summary>
            <param name="flags">    
        flags：需要完成的操作，取值如下
                PURGE_RXABORT 终止所有未完成的重叠读取操作并立即返回，即使读取操作尚未完成。
                PURGE_RXCLEAR 清除输入缓冲区（如果设备驱动程序有一个）。
                PURGE_TXABORT 终止所有未完成的重叠写操作并立即返回，即使写操作尚未完成。
                PURGE_TXCLEAR 清除输出缓冲区（如果设备驱动程序有一个）。
</param>
            <returns>正确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:vSerialPort.setDCB(_DCB*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
设置串口信息
</summary>
            <param name="dcb">串口信息配置的DCB结构体</param>
            <returns>正确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:vSerialPort.setTimeouts(_COMMTIMEOUTS*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
设置超时
</summary>
            <param name="timeouts">超时配置的COMMTIMEOUTS结构体</param>
            <returns>确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:vSerialPort.isOpened">
            <summary>
关闭串口
</summary>
            <summary>
判断串口是否打开
</summary>
            <returns>正确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:vSerialPort.openSyn(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte,System.Byte,System.Byte)">
            <summary>
同步方式打开串口,并配置默认信息
</summary>
            <param name="serial_name">串口名称</param>
            <param name="baud_rate">波特率</param>
            <param name="parity">校验方式</param>
            <param name="byte_size">数据位大小</param>
            <param name="stop_bits">停止位  0, 1, 2对应的是1bit, 1.5bits, 2bits.</param>
            <returns>正确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:init_message_pointer(message_struct*,System.Void*,System.UInt16)">
            <summary>
方式二 -&gt;初始化message_struct
</summary>
            <param name="pMessageStruct" />
            <param name="pMessageSt" />
            <param name="uLen" />
            <returns />
        </member>
        <member name="M:init_message_struct(message_struct*,System.UInt16)">
            <summary>
方式一 -&gt;初始化message_struct
</summary>
            <param name="pMessageStruct" />
            <param name="uLen" />
            <returns />
        </member>
        <member name="M:init_frame_pointer(frame_struct*,System.Void*,System.UInt16)">
            <summary>
方式二-&gt;初始化frame_struct 外部分配地址 该方式更方便修改数据
</summary>
            <param name="pFrameStruct" />
            <param name="pFrameSt" />
            <param name="uLen" />
            <returns />
        </member>
        <member name="M:init_frame_struct(frame_struct*,System.UInt16)">
            <summary>
方式一-&gt;初始化frame_struct 自动分配地址
</summary>
            <param name="pFrameStruct" />
            <param name="uLen" />
            <returns />
        </member>
        <member name="M:check_protocol_heade(System.Byte*)">
            <summary>
检查帧头
</summary>
            <param name="pData" />
            <returns />
        </member>
        <member name="M:CRC16_Check_Sum(System.Byte*,System.UInt32)">
            <summary>
检验CRC16数据段
</summary>
            <param name="pchMessage" />
            <param name="dwLength" />
            <returns />
        </member>
        <member name="M:Get_CRC16_Check(System.Byte*,System.UInt32)">
            <summary>
获取CRC16校验码
</summary>
            <param name="pchMessage" />
            <param name="dwLength" />
            <returns />
        </member>
        <member name="M:CRC8_Check_Sum(System.Byte*,System.UInt16)">
            <summary>
检验CRC8数据段
</summary>
            <param name="pchMessage" />
            <param name="dwLength" />
            <returns />
        </member>
        <member name="M:Get_CRC8_Check(System.Byte*,System.UInt16)">
            <summary>
获取CRC8校验码
</summary>
            <param name="pchMessage" />
            <param name="dwLength" />
            <returns />
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialDebugPrintf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
            <summary>
接收调试信息信息打印函数
</summary>
            <param name="pStr" />
            <summary>
接收调试信息信息打印函数
</summary>
            <param name="pStr" />
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vReceiveCallBack">
            <summary>
接收数据处理完成中断
</summary>
            <summary>
接收数据处理完成中断
</summary>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialSetDebugCallbackFun(System.Byte,vSeaskyProtocol.pDebugPointer)">
            <summary>
设置调试信息等级和调试信息回调显示函数
</summary>
            <param name="debugLevel">调试信息等级</param>
            <param name="pFun">调试信息回调显示函数</param>
            <summary>
设置调试信息等级和调试信息回调显示函数
</summary>
            <param name="debugLevel">调试信息等级</param>
            <param name="pFun">调试信息回调显示函数</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialSetReceivCallbackFun(vSeaskyProtocol.pReceivePointer)">
            <summary>
设置接收数据处理完成回调函数
</summary>
            <param name="pFun" />
            <summary>
设置接收数据处理完成回调函数
</summary>
            <param name="pFun">接收数据处理完成回调函数</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolTransmit(System.UInt16,System.UInt16,System.UInt16,System.UInt32*,System.UInt16)">
            <summary>
协议计算，并发送数据
</summary>
            <summary>
协议计算，并发送数据
</summary>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialReceiveTask">
            <summary>
将该函数放在一个独立的线程中，以实现串口消息的接收处理
</summary>
            <summary>
将该函数放在一个独立的线程中，以实现串口消息的接收处理
</summary>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialGetLastError">
            <summary>
得到最后一次失败的错误信息
</summary>
            <returns />
            <summary>
得到最后一次失败的错误信息
</summary>
            <returns />
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialClearBuffer">
            <summary>
清除缓冲区
</summary>
            <summary>
清除缓冲区
</summary>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialIsOpen">
            <summary>
判断串口是否打开
</summary>
            <returns>正确返回为ture，错误返回为false</returns>
            <summary>
判断串口是否打开
</summary>
            <returns>正确返回为ture，错误返回为false</returns>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialClose">
            <summary>
关闭串口
</summary>
            <summary>
关闭串口
</summary>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.vSerialOpen(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
同步方式打开串口
</summary>
            <param name="com_num">串口号</param>
            <param name="baud_rate">波特率</param>
            <param name="parity">奇偶校验位</param>
            <param name="byte_size">数据位</param>
            <param name="stop_bits">停止位</param>
            <returns />
            <summary>
同步方式打开串口
</summary>
            <param name="com_num">串口号</param>
            <param name="baud_rate">波特率</param>
            <param name="parity">奇偶校验位</param>
            <param name="byte_size">数据位</param>
            <param name="stop_bits">停止位</param>
            <returns />
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolInitRx(System.UInt32*,System.Byte*,System.UInt16)">
            <summary>
初始化协议Rx所需内存,外部分配，uLen需小于128
</summary>
            <param name="pRxData">预先分配的内存地址</param>
            <param name="pRxBuffer">预先分配的内存地址</param>
            <param name="uLen">pRxData的数据长度</param>
            <summary>
初始化协议Rx所需内存,外部分配，uLen需小于128
</summary>
            <param name="pRxData">预先分配的内存地址</param>
            <param name="pRxBuffer">预先分配的内存地址</param>
            <param name="uLen">pRxData的数据长度</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolInitTx(System.UInt32*,System.Byte*,System.UInt16)">
            <summary>
初始化协议Tx所需内存，外部分配，uLen需小于128
</summary>
            <param name="pTxData">预先分配的内存地址</param>
            <param name="pTxBuffer">预先分配的内存地址</param>
            <param name="uLen">pTxData的数据长度</param>
            <summary>
初始化协议Tx所需内存，外部分配，uLen需小于128
</summary>
            <param name="pTxData">预先分配的内存地址</param>
            <param name="pTxBuffer">预先分配的内存地址</param>
            <param name="uLen">pTxData的数据长度</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolRxPointGet(System.UInt32*,System.Byte*,System.UInt16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
获取Rx动态内存地址和长度，返回长度为 pRxData长度，pRxBuffer长度为 uMaxLen*4+12
</summary>
            <param name="pRxData" />
            <param name="pRxBuffer" />
            <param name="uMaxLen">pRxData的数据长度</param>
            <summary>
获取Rx动态内存地址和长度，返回长度为 pRxData长度，pRxBuffer长度为 uMaxLen*4+12
</summary>
            <param name="pRxData" />
            <param name="pRxBuffer" />
            <param name="uMaxLen">pRxData的数据长度</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolTxPointGet(System.UInt32*,System.Byte*,System.UInt16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
获取Tx动态内存地址和长度，返回长度为 pRxData长度，pRxBuffer长度为 uMaxLen*4+12
</summary>
            <param name="pTxData" />
            <param name="pTxBuffer" />
            <param name="uMaxLen">pTxData的数据长度</param>
            <summary>
获取Tx动态内存地址和长度，返回长度为 pRxData长度，pRxBuffer长度为 uMaxLen*4+12
</summary>
            <param name="pTxData" />
            <param name="pTxBuffer" />
            <param name="uMaxLen">pTxData的数据长度</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolAutoInitRx(System.UInt16)">
            <summary>
自动初始化Rx所需动态内存，uLen需小于128，内部分配内存，在外部托管无法访问
</summary>
            <param name="uLen">pRxProtocol的uint32_t数据长度</param>
            <summary>
自动初始化Rx所需动态内存，uLen需小于128，内部分配内存，在外部托管无法访问
</summary>
            <param name="uLen">pRxProtocol的uint32_t数据长度</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolAutoInitTx(System.UInt16)">
            <summary>
自动初始化Tx所需动态内存，uLen需小于128，内部分配内存，在外部托管无法访问
</summary>
            <param name="uLen">pTxProtocol的uint32_t数据长度</param>
            <summary>
自动初始化Tx所需动态内存，uLen需小于128，内部分配内存，在外部托管无法访问
</summary>
            <param name="uLen">pTxProtocol的uint32_t数据长度</param>
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolCalcLen(System.UInt16)">
            <summary>
通过动态 Data(uint32_t) 长度计算总数据Buffer(uint8_t) 的长度
</summary>
            <param name="uLen" />
            <returns />
            <summary>
通过动态 Data(uint32_t) 长度计算 总数居Buffer(uint8_t) 的长度
</summary>
            <param name="uLen" />
            <returns />
        </member>
        <member name="M:vSeaskyProtocol.vSeaskyPort.ProtocolInit(System.UInt16,System.UInt16)">
            <summary>
初始化协议所需内存
</summary>
            <param name="uTxLen">pTxProtocol的uint32_t数据长度</param>
            <param name="uRxLen">pRxProtocol的uint32_t数据长度</param>
            <summary>
初始化协议所需内存
</summary>
            <param name="uTxLen">pTxProtocol的uint32_t数据长度</param>
            <param name="uRxLen">pRxProtocol的uint32_t数据长度</param>
        </member>
        <member name="T:vSeaskyProtocol.vSeaskyPort">
            <summary>
vSeasky协议通信组件,基于Win-Api
</summary>
        </member>
        <member name="M:get_message_point(protocol_struct*)">
            <summary>
提供给用户，直接操作数据，但是请注意不要超过数据长度，避免内存越界
</summary>
            <param name="pProtocol" />
            <returns />
            <summary>
提供给用户，直接操作数据，但是请注意不要超过数据长度，避免内存越界
</summary>
            <param name="pProtocol" />
            <returns />
        </member>
        <member name="M:get_user_data_point(protocol_struct*)">
            <summary>
提供给用户，直接操作数据，但是请注意不要超过数据长度，避免内存越界
</summary>
            <param name="pProtocol" />
            <returns />
            <summary>
提供给用户，直接操作数据，但是请注意不要超过数据长度，避免内存越界
</summary>
            <param name="pProtocol" />
            <returns />
        </member>
        <member name="M:deinit_protocol(protocol_struct*)">
            <summary>
反初始化，释放内存,如果是方式二创建然后反初始化，请注意规避野指针
</summary>
            <param name="pProtocol" />
            <summary>
反初始化，释放内存,如果是方式二创建然后反初始化，请注意规避野指针
</summary>
            <param name="pProtocol" />
        </member>
        <member name="M:parse_protocol(protocol_struct*,System.UInt16)">
            <summary>
解析接收到的数据
</summary>
            <param name="pProtocol" />
            <returns />
            <summary>
解析接收到的数据
</summary>
            <param name="pProtocol" />
            <returns />
        </member>
        <member name="M:make_protocol(protocol_struct*)">
            <summary>
生成带发送的数据内容
</summary>
            <param name="pProtocol" />
            <returns />
            <summary>
生成带发送的数据内容
</summary>
            <param name="pProtocol" />
            <returns />
        </member>
        <member name="M:init_protocol_pointer(protocol_struct*,System.Void*,System.Void*,System.UInt16)">
            <summary>
方式二 外部预先分配好内存空间
</summary>
            <param name="pProtocol" />
            <param name="pFrameSt" />
            <param name="pMessageSt" />
            <param name="uLen" />
            <returns />
            <summary>
方式二 外部预先分配好内存空间
</summary>
            <param name="pProtocol" />
            <param name="pFrameSt" />
            <param name="pMessageSt" />
            <param name="uLen" />
            <returns />
        </member>
        <member name="M:init_protocol(protocol_struct*,System.UInt16)">
            <summary>
方式一 初始化,并初始化内存
</summary>
            <param name="pProtocol" />
            <param name="uLen" />
            <summary>
方式一 初始化,并初始化内存
</summary>
            <param name="pProtocol" />
            <param name="uLen" />
        </member>
        <member name="M:get_protocol_size(System.UInt16)">
            <summary>
根据data_union长度计算数据帧长度，用于分配内存
</summary>
            <param name="uLen" />
            <returns />
            <summary>
根据data_union长度计算数据帧长度，用于分配内存
</summary>
            <param name="uLen" />
            <returns />
        </member>
        <member name="M:init_crc16_tab">
            <summary>
为了获得最佳性能，使用CRC16例程查找带有值的表
</summary>
            <param name="" />
            <summary>
为了获得最佳性能，使用CRC16例程查找带有值的表
</summary>
            <param name="" />
        </member>
        <member name="M:update_crc_16(System.UInt16,System.Byte)">
            <summary>
前一个循环冗余校验值和下一个要检查的数据字节。
</summary>
            <param name="crc" />
            <param name="c" />
            <returns />
            <summary>
前一个循环冗余校验值和下一个要检查的数据字节。
</summary>
            <param name="crc" />
            <param name="c" />
            <returns />
        </member>
        <member name="M:crc_modbus(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt16)">
            <summary>
一次计算16位modbus循环冗余校验
</summary>
            <param name="input_str">字符串</param>
            <param name="num_bytes">字节数</param>
            <returns />
            <summary>
一次计算16位modbus循环冗余校验
</summary>
            <param name="input_str">字符串</param>
            <param name="num_bytes">字节数</param>
            <returns />
        </member>
        <member name="M:crc_16(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt16)">
            <summary>
函数crc_16()一次计算一个字节的16位CRC16
</summary>
            <param name="input_str">字符串</param>
            <param name="num_bytes">字节数</param>
            <returns />
            <summary>
函数crc_16()一次计算一个字节的16位CRC16
</summary>
            <param name="input_str">字符串</param>
            <param name="num_bytes">字节数</param>
            <returns />
        </member>
        <member name="M:update_crc_8(System.Byte,System.Byte)">
            <summary>
给定一个数据字节和循环冗余校验值的前一个值
</summary>
            <param name="crc" />
            <param name="val" />
            <returns>计算并返回数据的新的实际crc值</returns>
            <summary>
给定一个数据字节和循环冗余校验值的前一个值
</summary>
            <param name="crc" />
            <param name="val" />
            <returns>计算并返回数据的新的实际crc值</returns>
        </member>
        <member name="M:crc_8(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt16)">
            <summary>
计算输入字符串的8位宽crc
</summary>
            <param name="input_str" />
            <param name="num_bytes">给定长度</param>
            <returns />
            <summary>
计算输入字符串的8位宽crc
</summary>
            <param name="input_str" />
            <param name="num_bytes">给定长度</param>
            <returns />
        </member>
    </members>
</doc>